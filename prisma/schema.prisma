// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

enum Role {
  Admin
  Teacher
  Student
  Parent
  User
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          Role?     @default(User)
  schoolName    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  dataStudent   Student?  @relation(fields:[dataStudentId], references:[id])
  dataStudentId String?   @unique
  dataTeacher   Teacher?  @relation(fields:[dataTeacherId], references:[id])
  dataTeacherId String?   @unique
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Student {
  id            String         @id @default(cuid())
  name          String?
  email         String?         @unique
  image         String?
  address       String
  nim           String
  grade         Int
  class         String
  parent        String
  phone         String
  schoolName    String?
  birthday      DateTime
  user          User?           @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  address       String
  teacherId     Int
  class         String
  subject       String
  birthday      DateTime
  image         String?
  schoolName    String?
  phone         String
  user          User?           @relation()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}